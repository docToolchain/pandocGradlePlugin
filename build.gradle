plugins {
    id 'groovy'
    id 'org.ysb33r.gradletest' version '2.0-alpha-6'
    id 'com.gradle.plugin-publish' version '0.9.7'
    id 'fi.linuxbox.download.worker' version '0.3'
}

import fi.linuxbox.gradle.download.worker.DownloadWorkerTask

version = '0.1-SNAPSHOT'
group = 'io.doctoolchain.gradle'

ext {
    spockGroovyVer = GroovySystem.version.replaceAll(/\.\d+$/,'') 

    notSnapshot = { !version.endsWith('-SNAPSHOT') }
}

repositories {
    jcenter()
}

configurations {
    integrationTestCompile {
        extendsFrom testCompile
    }
    integrationTestRuntime {
        extendsFrom integrationTestCompile, testRuntime
    }
}

dependencies {

    compile 'org.ysb33r.gradle:grolifant:0.5.1'
    compile localGroovy() 
    compile gradleApi() 

   testCompile ("org.spockframework:spock-core:1.1-groovy-${spockGroovyVer}") { 
        exclude module : 'groovy-all' 
    }
}

configurations {
    gradleTestRuntime.extendsFrom configurations.runtime
}

sourceSets {
    integrationTest {
        java.srcDir file("src/integrationTest/java")
        groovy.srcDir file("src/integrationTest/groovy")
        resources.srcDir file("src/integrationTest/resources")
        compileClasspath = sourceSets.main.output +  configurations.integrationTestCompile
        runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
    }
}

apply from : 'gradle/cache-downloads.gradle'

task integrationTest(type: Test, dependsOn: jar) {

    description 'Runs the integration tests'
    group 'Verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    reports.html.destination = file("${reporting.baseDir}/integrationTests")
    systemProperties 'io.doctoolchain.gradle.pandoc.uri': productTestCacheDir.absoluteFile.toURI()

    dependsOn cacheTestProductBinaries
    mustRunAfter test
}

check.dependsOn integrationTest


gradleTest {
    versions '3.5', '4.0.2', '4.6'
    dependsOn cacheTestProductBinaries
    musrRunAfter integrationTest
    systemProperties 'io.doctoolchain.gradle.pandoc.uri': productTestCacheDir.absoluteFile.toURI()
}


productTestVersions.each { ver ->

    final String relativePath = "${ver}/pandoc-${ver}-${productOsArch}"
    final File target = file("${productTestCacheDir}/${relativePath}")

    Task downloader = tasks.create("downloadPandoc${ver}", DownloadWorkerTask) {
        from "https://github.com/jgm/pandoc/releases/download/${relativePath}"
        to target

        onlyIf { !target.exists() }
    }

    cacheTestProductBinaries.dependsOn downloader
}


pluginBundle {
    description = 'Run pandoc from Gradle without having it installed'
    website = 'https://github.com/docToolchain/pandocGradlePlugin'
    vcsUrl = 'https://github.com/docToolchain/pandocGradlePlugin.git'

    tags = ['documentation', 'pandoc']

    plugins {
        basePlugin {
            id = 'io.doctoolchain.pandoc'
            displayName = 'Run pandoc from Gradle without having it installed'
        }
    }
}

publishPlugins {
    mustRunAfter build
    onlyIf notSnapshot
}

